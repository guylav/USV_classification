# -*- coding: utf-8 -*-
"""עותק של Statistics_tests.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FG0gR4pyzZ4UtKf0MnIVaFzE2rptApdf
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/Shareddrives/TEST_RECORDINGS/Final_Project/E:/

import numpy as np
import PIL.Image as Image
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
import tensorflow_hub as hub
from tensorflow.keras.preprocessing import image
import pandas as pd
import os
import xlrd
import math
import scipy
import scipy.stats as stats
import scipy.io.wavfile as wavfile
from scipy.signal import butter, lfilter, freqz
import librosa
import librosa.display
import cv2

class sample:
  def __init__(self, mother, name, sex, age, matgen, pupgen, rec_num, syls, time_between):
    self.mother = mother
    self.name = name
    self.sex = sex
    self.age = age
    self.matgen = matgen
    self.pupgen = pupgen
    self.rec_num = rec_num
    self.syls = syls
    self.time_between = time_between

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/Shareddrives/TEST_RECORDINGS/Final_Project/Recordings_ella_ayelet/

samples = np.load('model_prediction_recordings.npy', allow_pickle=True)
for i in range(len(samples)):
  for j in range(len(samples[i].syls)):
    if np.max(samples[i].syls[j])<0.5:
      temp = 10
    else:
      temp = np.argmax(samples[i].syls[j])
    samples[i].syls[j] = []
    samples[i].syls[j] = temp
print(samples[i].syls[j])

F_WT_syls_4 = []
F_WT_syls_8 = []
F_WT_syls_10 = []
F_WT_syls_12 = []
F_HT_syls_4 = []
F_HT_syls_8 = []
F_HT_syls_10 = []
F_HT_syls_12 = []
M_WT_syls_4 = []
M_WT_syls_8 = []
M_WT_syls_10 = []
M_WT_syls_12 = []
M_HT_syls_4 = []
M_HT_syls_8 = []
M_HT_syls_10 = []
M_HT_syls_12 = []
for i in range(len(samples)):
  if samples[i].sex == 'F':
    if samples[i].pupgen == 'WT':
      if samples[i].age == 4:
        F_WT_syls_4.extend(samples[i].syls)
      elif samples[i].age == 8:
        F_WT_syls_8.extend(samples[i].syls)
      elif samples[i].age == 10:
        F_WT_syls_10.extend(samples[i].syls)
      else:
        F_WT_syls_12.extend(samples[i].syls)
    else:
      if samples[i].age == 4:
        F_HT_syls_4.extend(samples[i].syls)
      elif samples[i].age == 8:
        F_HT_syls_8.extend(samples[i].syls)
      elif samples[i].age == 10:
        F_HT_syls_10.extend(samples[i].syls)
      else:
        F_HT_syls_12.extend(samples[i].syls)
  elif samples[i].pupgen == 'WT':
    if samples[i].age == 4:
      M_WT_syls_4.extend(samples[i].syls)
    elif samples[i].age == 8:
      M_WT_syls_8.extend(samples[i].syls)
    elif samples[i].age == 10:
      M_WT_syls_10.extend(samples[i].syls)
    else:
      M_WT_syls_12.extend(samples[i].syls)
  else:
    if samples[i].age == 4:
      M_HT_syls_4.extend(samples[i].syls)
    elif samples[i].age == 8:
      M_HT_syls_8.extend(samples[i].syls)
    elif samples[i].age == 10:
      M_HT_syls_10.extend(samples[i].syls)
    else:
      M_HT_syls_12.extend(samples[i].syls)

print(len(F_WT_syls_4))
print(len(F_WT_syls_8))
print(len(F_WT_syls_10))
print(len(F_WT_syls_12))
print(len(F_HT_syls_4))
print(len(F_HT_syls_8))
print(len(F_HT_syls_10))
print(len(F_HT_syls_12))
print(len(M_WT_syls_4))
print(len(M_WT_syls_8))
print(len(M_WT_syls_10))
print(len(M_WT_syls_12))
print(len(M_HT_syls_4))
print(len(M_HT_syls_8))
print(len(M_HT_syls_10))
print(len(M_HT_syls_12))

print(F_HT_syls_4)

fig, axes = plt.subplots(2, 2, figsize=(18, 12))
#fig.suptitle('Syllable usage females - compatison by age and genotype')
axes[0, 0].hist([F_WT_syls_4, F_HT_syls_4], bins=np.arange(12)-0.5, density=True)
axes[0, 0].set_xticks(range(11))
axes[0, 0].set_title('Age 4 days', fontsize=18)
axes[0, 0].set_xlabel('Syllable typs', fontsize=14)
axes[0, 0].set_ylabel('Percentage', fontsize=14)
axes[0, 0].legend(['WT', 'HT'])
axes[0, 1].hist([F_WT_syls_8, F_HT_syls_8], bins=np.arange(12)-0.5, density=True)
axes[0, 1].set_xticks(range(11))
axes[0, 1].set_title('Age 8 days', fontsize=18)
axes[0, 1].set_xlabel('Syllable typs', fontsize=14)
axes[0, 1].set_ylabel('Percentage', fontsize=14)
axes[0, 1].legend(['WT', 'HT'])
axes[1, 0].hist([F_WT_syls_10, F_HT_syls_10], bins=np.arange(12)-0.5, density=True)
axes[1, 0].set_xticks(range(11))
axes[1, 0].set_title('Age 10 days', fontsize=18)
axes[1, 0].set_xlabel('Syllable typs', fontsize=14)
axes[1, 0].set_ylabel('Percentage', fontsize=14)
axes[1, 0].legend(['WT', 'HT'])
axes[1, 1].hist([F_WT_syls_12, F_HT_syls_12], bins=np.arange(12)-0.5, density=True)
axes[1, 1].set_xticks(range(11))
axes[1, 1].set_title('Age 12 days', fontsize=18)
axes[1, 1].set_xlabel('Syllable typs', fontsize=14)
axes[1, 1].set_ylabel('Percentage', fontsize=14)
axes[1, 1].legend(['WT', 'HT'])
plt.savefig('female_mice_hist')

fig, axes = plt.subplots(1, 2, figsize=(18, 6))
#fig.suptitle('Syllable usage females - compatison by age and genotype')
axes[0].hist([M_WT_syls_10, M_HT_syls_10], bins=np.arange(12)-0.5, density=True)
axes[0].set_xticks(range(11))
axes[0].set_title('Age 10 days', fontsize=18)
axes[0].set_xlabel('Syllable typs', fontsize=14)
axes[0].set_ylabel('Percentage', fontsize=14)
axes[0].legend(['WT', 'HT'])
axes[1].hist([M_WT_syls_12, M_HT_syls_12], bins=np.arange(12)-0.5, density=True)
axes[1].set_xticks(range(11))
axes[1].set_title('Age 12 days', fontsize=18)
axes[1].set_xlabel('Syllable typs', fontsize=14)
axes[1].set_ylabel('Percentage', fontsize=14)
axes[1].legend(['WT', 'HT'])
plt.savefig('male_mice_hist')

F_WT_4_sylCount = []
F_HT_4_sylCount = []
for i in range(11):
  F_WT_4_sylCount.append(F_WT_syls_4.count(i))
  F_HT_4_sylCount.append(F_HT_syls_4.count(i))
del F_WT_4_sylCount[4]
del F_HT_4_sylCount[4]

F_WT_8_sylCount = []
F_HT_8_sylCount = []
for i in range(11):
  F_WT_8_sylCount.append(F_WT_syls_8.count(i))
  F_HT_8_sylCount.append(F_HT_syls_8.count(i))
del F_WT_8_sylCount[4]
del F_HT_8_sylCount[4]
del F_WT_8_sylCount[4]
del F_HT_8_sylCount[4]
del F_WT_8_sylCount[4]
del F_HT_8_sylCount[4]

F_WT_10_sylCount = []
F_HT_10_sylCount = []
for i in range(11):
  F_WT_10_sylCount.append(F_WT_syls_10.count(i))
  F_HT_10_sylCount.append(F_HT_syls_10.count(i))

F_WT_12_sylCount = []
F_HT_12_sylCount = []
for i in range(11):
  F_WT_12_sylCount.append(F_WT_syls_12.count(i))
  F_HT_12_sylCount.append(F_HT_syls_12.count(i))
del F_WT_12_sylCount[6]
del F_HT_12_sylCount[6]
del F_WT_12_sylCount[6]
del F_HT_12_sylCount[6]

tot1 = sum(F_WT_4_sylCount)
tot2 = sum(F_HT_4_sylCount)
for i in range(len(F_WT_4_sylCount)):
  F_WT_4_sylCount[i] = F_WT_4_sylCount[i]*100/tot1
  F_HT_4_sylCount[i] = F_HT_4_sylCount[i]*100/tot2

tot1 = sum(F_WT_8_sylCount)
tot2 = sum(F_HT_8_sylCount)
for i in range(len(F_WT_8_sylCount)):
  F_WT_8_sylCount[i] = F_WT_8_sylCount[i]*100/tot1
  F_HT_8_sylCount[i] = F_HT_8_sylCount[i]*100/tot2

tot1 = sum(F_WT_10_sylCount)
tot2 = sum(F_HT_10_sylCount)
for i in range(len(F_WT_10_sylCount)):
  F_WT_10_sylCount[i] = F_WT_10_sylCount[i]*100/tot1
  F_HT_10_sylCount[i] = F_HT_10_sylCount[i]*100/tot2

tot1 = sum(F_WT_12_sylCount)
tot2 = sum(F_HT_12_sylCount)
for i in range(len(F_WT_12_sylCount)):
  F_WT_12_sylCount[i] = F_WT_12_sylCount[i]*100/tot1
  F_HT_12_sylCount[i] = F_HT_12_sylCount[i]*100/tot2

conTable4 = np.array([[F_WT_4_sylCount], [F_HT_4_sylCount]])
conTable8 = np.array([[F_WT_8_sylCount], [F_HT_8_sylCount]])
conTable10 = np.array([[F_WT_10_sylCount], [F_HT_10_sylCount]])
conTable12 = np.array([[F_WT_12_sylCount], [F_HT_12_sylCount]])

stat, p4, dof, exp = stats.chi2_contingency(conTable4)
stat, p8, dof, exp = stats.chi2_contingency(conTable8)
stat, p10, dof, exp = stats.chi2_contingency(conTable10)
stat, p12, dof, exp = stats.chi2_contingency(conTable12)

print(p4)
print(p8)
print(p10)
print(p12)

M_WT_10_sylCount = []
M_HT_10_sylCount = []
for i in range(11):
  M_WT_10_sylCount.append(M_WT_syls_10.count(i))
  M_HT_10_sylCount.append(M_HT_syls_10.count(i))
del M_WT_10_sylCount[3]
del M_HT_10_sylCount[3]
del M_WT_10_sylCount[3]
del M_HT_10_sylCount[3]

M_WT_12_sylCount = []
M_HT_12_sylCount = []
for i in range(11):
  M_WT_12_sylCount.append(M_WT_syls_12.count(i))
  M_HT_12_sylCount.append(M_HT_syls_12.count(i))
del M_WT_12_sylCount[4]
del M_HT_12_sylCount[4]

tot1 = sum(M_WT_10_sylCount)
tot2 = sum(M_HT_10_sylCount)
for i in range(len(M_WT_10_sylCount)):
  M_WT_10_sylCount[i] = M_WT_10_sylCount[i]*100/tot1
  M_HT_10_sylCount[i] = M_HT_10_sylCount[i]*100/tot2

tot1 = sum(M_WT_12_sylCount)
tot2 = sum(M_HT_12_sylCount)
for i in range(len(M_WT_12_sylCount)):
  M_WT_12_sylCount[i] = M_WT_12_sylCount[i]*100/tot1
  M_HT_12_sylCount[i] = M_HT_12_sylCount[i]*100/tot2

conTable10m = np.array([[M_WT_10_sylCount], [M_HT_10_sylCount]])
conTable12m = np.array([[M_WT_12_sylCount], [M_HT_12_sylCount]])

stat, p10M, dof, exp = stats.chi2_contingency(conTable10m)
stat, p12M, dof, exp = stats.chi2_contingency(conTable12m)

print(p10M)
print(p12M)